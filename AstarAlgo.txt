import heapq

class Node:
    def __init__(self, position, parent=None):
        self.position = position  # (x, y) coordinates
        self.parent = parent  # Parent node
        self.g = 0  # Cost from start to the current node
        self.h = 0  # Heuristic cost to the goal
        self.f = 0  # Total cost (g + h)

    def __lt__(self, other):
        return self.f < other.f  # For priority queue to sort nodes by f

def heuristic(a, b):
    # Manhattan distance as heuristic
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def astar(start, goal, grid):
    open_list = []
    closed_list = set()

    start_node = Node(start)
    goal_node = Node(goal)
    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)
        closed_list.add(current_node.position)

        # Check if we've reached the goal
        if current_node.position == goal_node.position:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]  # Return reversed path

        # Generate children (neighbors)
        neighbors = [
            (0, 1),  # Down
            (0, -1), # Up
            (1, 0),  # Right
            (-1, 0)  # Left
        ]

        for new_position in neighbors:
            node_position = (
                current_node.position[0] + new_position[0],
                current_node.position[1] + new_position[1]
            )

            # Check if within grid bounds
            if (0 <= node_position[0] < len(grid) and
                0 <= node_position[1] < len(grid[0]) and
                grid[node_position[0]][node_position[1]] == 0):

                if node_position in closed_list:
                    continue  # Already evaluated

                child_node = Node(node_position, current_node)
                child_node.g = current_node.g + 1  # Increment cost
                child_node.h = heuristic(child_node.position, goal_node.position)
                child_node.f = child_node.g + child_node.h

                # Check if this child node is already in the open list
                if add_to_open(open_list, child_node):
                    heapq.heappush(open_list, child_node)

    return None  # No path found

def add_to_open(open_list, child_node):
    for node in open_list:
        if child_node.position == node.position and child_node.g >= node.g:
            return False  # Not adding because we found a better path
    return True  # Add to open list

# Example usage
if __name__ == "__main__":
    # 0 represents walkable cells, 1 represents obstacles
    grid = [
        [0, 0, 0, 0, 0],
        [0, 1, 1, 1, 0],
        [0, 0, 0, 0, 0],
        [0, 1, 1, 0, 0],
        [0, 0, 0, 0, 0]
    ]
    start = (0, 0)  # Starting position
    goal = (4, 4)   # Goal position

    path = astar(start, goal, grid)
    if path:
        print("Path found:", path)
    else:
        print("No path found.")