import math

# Constants
PLAYER_X = 'X'
PLAYER_O = 'O'
EMPTY = ' '

# Game board representation
class TicTacToe:
    def __init__(self):
        self.board = [[EMPTY] * 3 for _ in range(3)]

    def print_board(self):
        for row in self.board:
            print("|".join(row))
            print("-" * 5)

    def is_full(self):
        return all(cell != EMPTY for row in self.board for cell in row)

    def check_winner(self):
        # Check rows, columns, and diagonals for a winner
        for i in range(3):
            if self.board[i][0] == self.board[i][1] == self.board[i][2] != EMPTY:
                return self.board[i][0]
            if self.board[0][i] == self.board[1][i] == self.board[2][i] != EMPTY:
                return self.board[0][i]
        if self.board[0][0] == self.board[1][1] == self.board[2][2] != EMPTY:
            return self.board[0][0]
        if self.board[0][2] == self.board[1][1] == self.board[2][0] != EMPTY:
            return self.board[0][2]
        return None

    def evaluate(self):
        winner = self.check_winner()
        if winner == PLAYER_X:
            return 10
        elif winner == PLAYER_O:
            return -10
        return 0

    def get_possible_moves(self):
        return [(i + 1, j + 1) for i in range(3) for j in range(3) if self.board[i][j] == EMPTY]

    def make_move(self, row, col, player):
        self.board[row - 1][col - 1] = player  # Convert to 0-index

    def undo_move(self, row, col):
        self.board[row - 1][col - 1] = EMPTY  # Convert to 0-index

    def alpha_beta(self, depth, alpha, beta, maximizing_player):
        score = self.evaluate()
        if score == 10 or score == -10:
            return score
        if self.is_full():
            return 0
        if maximizing_player:
            max_eval = -math.inf
            for (row, col) in self.get_possible_moves():
                self.make_move(row, col, PLAYER_X)
                eval = self.alpha_beta(depth + 1, alpha, beta, False)
                self.undo_move(row, col)
                max_eval = max(max_eval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break
            return max_eval
        else:
            min_eval = math.inf
            for (row, col) in self.get_possible_moves():
                self.make_move(row, col, PLAYER_O)
                eval = self.alpha_beta(depth + 1, alpha, beta, True)
                self.undo_move(row, col)
                min_eval = min(min_eval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break
            return min_eval

    def best_move(self):
        best_score = -math.inf
        move = None
        for (row, col) in self.get_possible_moves():
            self.make_move(row, col, PLAYER_X)
            score = self.alpha_beta(0, -math.inf, math.inf, False)
            self.undo_move(row, col)
            if score > best_score:
                best_score = score
                move = (row, col)
        return move

# Game loop
def play_game():
    game = TicTacToe()
    current_player = PLAYER_X
    while True:
        game.print_board()
        if current_player == PLAYER_X:
            row, col = game.best_move()
            print(f"Player X plays: ({row}, {col})")
        else:
            try:
                row, col = map(int, input("Player O, enter your move (row col): ").split())
            except ValueError:
                print("Invalid input. Please enter two numbers separated by a space.")
                continue

        if row < 1 or row > 3 or col < 1 or col > 3 or game.board[row - 1][col - 1] != EMPTY:
            print("Invalid move. Try again.")
            continue

        game.make_move(row, col, current_player)
        winner = game.check_winner()
        if winner:
            game.print_board()
            print(f"Player {winner} wins!")
            break
        if game.is_full():
            game.print_board()
            print("It's a draw!")
            break
        current_player = PLAYER_O if current_player == PLAYER_X else PLAYER_X

if __name__ == "__main__":
    play_game()